generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  telegramId      BigInt         @unique
  firstName       String?
  lastName        String?
  username        String?
  walletAddress   String?
  photoUrl        String?
  isPremium       Boolean        @default(false)
  languageCode    String?
  crocoBalance    Float          @default(0)
  fishBalance     Float          @default(0)
  lastDailyReward DateTime?
  streakDays      Int            @default(0)
  referralCode    String         @unique
  referredByCode  String?
  referralLevel   Int            @default(0)
  treePath        String?
  xrplAddress     String?        @unique
  xrplSeed        String?
  xrplPublicKey   String?
  xrplPrivateKey  String?
  autoBoosts      AutoBoost[]
  autoHatching    AutoHatching[]
  eggs            Egg[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model SpeedUpgradeItem {
  id        Int      @id @default(autoincrement())
  speed     Float    @default(2)
  price     Float    @default(10000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BoostUpgradeItem {
  id        Int      @id @default(autoincrement())
  speed     Float    @default(2)
  duration  Int      @default(1)
  fishPrice Float    @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutoHatching {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  price     Float    @default(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FishItem {
  id        Int   @id @default(autoincrement())
  amount    Float @default(1)
  priceTON  Float
  priceStar Float
}


model Egg {
  id                  Int      @id @default(autoincrement())
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
  hatchProgress       Float    @default(0)
  hatchSpeed          Float    @default(1)
  isIncubating        Boolean  @default(false)
  lastIncubationStart DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model AutoBoost {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  boostType  String // e.g., "hatchSpeed", "tokenMultiplier"
  multiplier Float
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DailyReward {
  id        Int      @id @default(autoincrement())
  day       Int
  reward    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leaderboard {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  score     Int
  updatedAt DateTime @updatedAt
}

model Fish {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  priceTON    Float
  priceStar   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
